// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visualization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_visualization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_visualization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_visualization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_visualization_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_visualization_2eproto;
namespace visualization {
class BaseLine;
struct BaseLineDefaultTypeInternal;
extern BaseLineDefaultTypeInternal _BaseLine_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Label;
struct LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Reply;
struct ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
}  // namespace visualization
PROTOBUF_NAMESPACE_OPEN
template<> ::visualization::BaseLine* Arena::CreateMaybeMessage<::visualization::BaseLine>(Arena*);
template<> ::visualization::Color* Arena::CreateMaybeMessage<::visualization::Color>(Arena*);
template<> ::visualization::Frame* Arena::CreateMaybeMessage<::visualization::Frame>(Arena*);
template<> ::visualization::Label* Arena::CreateMaybeMessage<::visualization::Label>(Arena*);
template<> ::visualization::Point* Arena::CreateMaybeMessage<::visualization::Point>(Arena*);
template<> ::visualization::Reply* Arena::CreateMaybeMessage<::visualization::Reply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace visualization {

enum BaseLine_LineStyle : int {
  BaseLine_LineStyle_SolidLine = 0,
  BaseLine_LineStyle_DashLine = 1,
  BaseLine_LineStyle_DotLine = 2,
  BaseLine_LineStyle_DashDotLine = 3,
  BaseLine_LineStyle_DashDotDotLine = 4,
  BaseLine_LineStyle_BaseLine_LineStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BaseLine_LineStyle_BaseLine_LineStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BaseLine_LineStyle_IsValid(int value);
constexpr BaseLine_LineStyle BaseLine_LineStyle_LineStyle_MIN = BaseLine_LineStyle_SolidLine;
constexpr BaseLine_LineStyle BaseLine_LineStyle_LineStyle_MAX = BaseLine_LineStyle_DashDotDotLine;
constexpr int BaseLine_LineStyle_LineStyle_ARRAYSIZE = BaseLine_LineStyle_LineStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BaseLine_LineStyle_descriptor();
template<typename T>
inline const std::string& BaseLine_LineStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BaseLine_LineStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BaseLine_LineStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BaseLine_LineStyle_descriptor(), enum_t_value);
}
inline bool BaseLine_LineStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BaseLine_LineStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BaseLine_LineStyle>(
    BaseLine_LineStyle_descriptor(), name, value);
}
enum BaseLine_Symbol : int {
  BaseLine_Symbol_none = 0,
  BaseLine_Symbol_t = 1,
  BaseLine_Symbol_s = 2,
  BaseLine_Symbol_p = 3,
  BaseLine_Symbol_h = 4,
  BaseLine_Symbol_star = 5,
  BaseLine_Symbol_plus = 6,
  BaseLine_Symbol_d = 7,
  BaseLine_Symbol_arrow_down = 8,
  BaseLine_Symbol_o = 9,
  BaseLine_Symbol_BaseLine_Symbol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BaseLine_Symbol_BaseLine_Symbol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BaseLine_Symbol_IsValid(int value);
constexpr BaseLine_Symbol BaseLine_Symbol_Symbol_MIN = BaseLine_Symbol_none;
constexpr BaseLine_Symbol BaseLine_Symbol_Symbol_MAX = BaseLine_Symbol_o;
constexpr int BaseLine_Symbol_Symbol_ARRAYSIZE = BaseLine_Symbol_Symbol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BaseLine_Symbol_descriptor();
template<typename T>
inline const std::string& BaseLine_Symbol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BaseLine_Symbol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BaseLine_Symbol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BaseLine_Symbol_descriptor(), enum_t_value);
}
inline bool BaseLine_Symbol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BaseLine_Symbol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BaseLine_Symbol>(
    BaseLine_Symbol_descriptor(), name, value);
}
enum Frame_Type : int {
  Frame_Type_CURVE = 0,
  Frame_Type_POLYGON = 1,
  Frame_Type_COLORMAP = 2,
  Frame_Type_Frame_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Frame_Type_Frame_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Frame_Type_IsValid(int value);
constexpr Frame_Type Frame_Type_Type_MIN = Frame_Type_CURVE;
constexpr Frame_Type Frame_Type_Type_MAX = Frame_Type_COLORMAP;
constexpr int Frame_Type_Type_ARRAYSIZE = Frame_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Frame_Type_descriptor();
template<typename T>
inline const std::string& Frame_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Frame_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Frame_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Frame_Type_descriptor(), enum_t_value);
}
inline bool Frame_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Frame_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Frame_Type>(
    Frame_Type_descriptor(), name, value);
}
// ===================================================================

class Reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:visualization.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  ~Reply() override;
  explicit PROTOBUF_CONSTEXPR Reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Reply& from) {
    Reply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "visualization.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
  };
  // bool reply = 1;
  void clear_reply();
  bool reply() const;
  void set_reply(bool value);
  private:
  bool _internal_reply() const;
  void _internal_set_reply(bool value);
  public:

  // @@protoc_insertion_point(class_scope:visualization.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool reply_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:visualization.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "visualization.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:visualization.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class Label final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:visualization.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  ~Label() override;
  explicit PROTOBUF_CONSTEXPR Label(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Label& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Label& from) {
    Label::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "visualization.Label";
  }
  protected:
  explicit Label(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kPosFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .visualization.Point pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::visualization::Point& pos() const;
  PROTOBUF_NODISCARD ::visualization::Point* release_pos();
  ::visualization::Point* mutable_pos();
  void set_allocated_pos(::visualization::Point* pos);
  private:
  const ::visualization::Point& _internal_pos() const;
  ::visualization::Point* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::visualization::Point* pos);
  ::visualization::Point* unsafe_arena_release_pos();

  // @@protoc_insertion_point(class_scope:visualization.Label)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::visualization::Point* pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:visualization.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "visualization.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // int32 r = 1;
  void clear_r();
  int32_t r() const;
  void set_r(int32_t value);
  private:
  int32_t _internal_r() const;
  void _internal_set_r(int32_t value);
  public:

  // int32 g = 2;
  void clear_g();
  int32_t g() const;
  void set_g(int32_t value);
  private:
  int32_t _internal_g() const;
  void _internal_set_g(int32_t value);
  public:

  // int32 b = 3;
  void clear_b();
  int32_t b() const;
  void set_b(int32_t value);
  private:
  int32_t _internal_b() const;
  void _internal_set_b(int32_t value);
  public:

  // int32 a = 4;
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:visualization.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t r_;
    int32_t g_;
    int32_t b_;
    int32_t a_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class BaseLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:visualization.BaseLine) */ {
 public:
  inline BaseLine() : BaseLine(nullptr) {}
  ~BaseLine() override;
  explicit PROTOBUF_CONSTEXPR BaseLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseLine(const BaseLine& from);
  BaseLine(BaseLine&& from) noexcept
    : BaseLine() {
    *this = ::std::move(from);
  }

  inline BaseLine& operator=(const BaseLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseLine& operator=(BaseLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseLine* internal_default_instance() {
    return reinterpret_cast<const BaseLine*>(
               &_BaseLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BaseLine& a, BaseLine& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseLine& from) {
    BaseLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "visualization.BaseLine";
  }
  protected:
  explicit BaseLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BaseLine_LineStyle LineStyle;
  static constexpr LineStyle SolidLine =
    BaseLine_LineStyle_SolidLine;
  static constexpr LineStyle DashLine =
    BaseLine_LineStyle_DashLine;
  static constexpr LineStyle DotLine =
    BaseLine_LineStyle_DotLine;
  static constexpr LineStyle DashDotLine =
    BaseLine_LineStyle_DashDotLine;
  static constexpr LineStyle DashDotDotLine =
    BaseLine_LineStyle_DashDotDotLine;
  static inline bool LineStyle_IsValid(int value) {
    return BaseLine_LineStyle_IsValid(value);
  }
  static constexpr LineStyle LineStyle_MIN =
    BaseLine_LineStyle_LineStyle_MIN;
  static constexpr LineStyle LineStyle_MAX =
    BaseLine_LineStyle_LineStyle_MAX;
  static constexpr int LineStyle_ARRAYSIZE =
    BaseLine_LineStyle_LineStyle_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LineStyle_descriptor() {
    return BaseLine_LineStyle_descriptor();
  }
  template<typename T>
  static inline const std::string& LineStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LineStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LineStyle_Name.");
    return BaseLine_LineStyle_Name(enum_t_value);
  }
  static inline bool LineStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LineStyle* value) {
    return BaseLine_LineStyle_Parse(name, value);
  }

  typedef BaseLine_Symbol Symbol;
  static constexpr Symbol none =
    BaseLine_Symbol_none;
  static constexpr Symbol t =
    BaseLine_Symbol_t;
  static constexpr Symbol s =
    BaseLine_Symbol_s;
  static constexpr Symbol p =
    BaseLine_Symbol_p;
  static constexpr Symbol h =
    BaseLine_Symbol_h;
  static constexpr Symbol star =
    BaseLine_Symbol_star;
  static constexpr Symbol plus =
    BaseLine_Symbol_plus;
  static constexpr Symbol d =
    BaseLine_Symbol_d;
  static constexpr Symbol arrow_down =
    BaseLine_Symbol_arrow_down;
  static constexpr Symbol o =
    BaseLine_Symbol_o;
  static inline bool Symbol_IsValid(int value) {
    return BaseLine_Symbol_IsValid(value);
  }
  static constexpr Symbol Symbol_MIN =
    BaseLine_Symbol_Symbol_MIN;
  static constexpr Symbol Symbol_MAX =
    BaseLine_Symbol_Symbol_MAX;
  static constexpr int Symbol_ARRAYSIZE =
    BaseLine_Symbol_Symbol_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Symbol_descriptor() {
    return BaseLine_Symbol_descriptor();
  }
  template<typename T>
  static inline const std::string& Symbol_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Symbol>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Symbol_Name.");
    return BaseLine_Symbol_Name(enum_t_value);
  }
  static inline bool Symbol_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Symbol* value) {
    return BaseLine_Symbol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kLabelFieldNumber = 1,
    kColorFieldNumber = 4,
    kLineStyleFieldNumber = 5,
    kThicknessFieldNumber = 6,
    kSymbolFieldNumber = 7,
  };
  // repeated .visualization.Point points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::visualization::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::Point >*
      mutable_points();
  private:
  const ::visualization::Point& _internal_points(int index) const;
  ::visualization::Point* _internal_add_points();
  public:
  const ::visualization::Point& points(int index) const;
  ::visualization::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::Point >&
      points() const;

  // .visualization.Label label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const ::visualization::Label& label() const;
  PROTOBUF_NODISCARD ::visualization::Label* release_label();
  ::visualization::Label* mutable_label();
  void set_allocated_label(::visualization::Label* label);
  private:
  const ::visualization::Label& _internal_label() const;
  ::visualization::Label* _internal_mutable_label();
  public:
  void unsafe_arena_set_allocated_label(
      ::visualization::Label* label);
  ::visualization::Label* unsafe_arena_release_label();

  // .visualization.Color color = 4;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::visualization::Color& color() const;
  PROTOBUF_NODISCARD ::visualization::Color* release_color();
  ::visualization::Color* mutable_color();
  void set_allocated_color(::visualization::Color* color);
  private:
  const ::visualization::Color& _internal_color() const;
  ::visualization::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::visualization::Color* color);
  ::visualization::Color* unsafe_arena_release_color();

  // .visualization.BaseLine.LineStyle line_style = 5;
  void clear_line_style();
  ::visualization::BaseLine_LineStyle line_style() const;
  void set_line_style(::visualization::BaseLine_LineStyle value);
  private:
  ::visualization::BaseLine_LineStyle _internal_line_style() const;
  void _internal_set_line_style(::visualization::BaseLine_LineStyle value);
  public:

  // int32 thickness = 6;
  void clear_thickness();
  int32_t thickness() const;
  void set_thickness(int32_t value);
  private:
  int32_t _internal_thickness() const;
  void _internal_set_thickness(int32_t value);
  public:

  // .visualization.BaseLine.Symbol symbol = 7;
  void clear_symbol();
  ::visualization::BaseLine_Symbol symbol() const;
  void set_symbol(::visualization::BaseLine_Symbol value);
  private:
  ::visualization::BaseLine_Symbol _internal_symbol() const;
  void _internal_set_symbol(::visualization::BaseLine_Symbol value);
  public:

  // @@protoc_insertion_point(class_scope:visualization.BaseLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::Point > points_;
    ::visualization::Label* label_;
    ::visualization::Color* color_;
    int line_style_;
    int32_t thickness_;
    int symbol_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:visualization.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit PROTOBUF_CONSTEXPR Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Frame& from) {
    Frame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "visualization.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Frame_Type Type;
  static constexpr Type CURVE =
    Frame_Type_CURVE;
  static constexpr Type POLYGON =
    Frame_Type_POLYGON;
  static constexpr Type COLORMAP =
    Frame_Type_COLORMAP;
  static inline bool Type_IsValid(int value) {
    return Frame_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Frame_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Frame_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Frame_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Frame_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Frame_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Frame_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 2,
    kTopicFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated .visualization.BaseLine lines = 2;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::visualization::BaseLine* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::BaseLine >*
      mutable_lines();
  private:
  const ::visualization::BaseLine& _internal_lines(int index) const;
  ::visualization::BaseLine* _internal_add_lines();
  public:
  const ::visualization::BaseLine& lines(int index) const;
  ::visualization::BaseLine* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::BaseLine >&
      lines() const;

  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // .visualization.Frame.Type type = 3;
  void clear_type();
  ::visualization::Frame_Type type() const;
  void set_type(::visualization::Frame_Type value);
  private:
  ::visualization::Frame_Type _internal_type() const;
  void _internal_set_type(::visualization::Frame_Type value);
  public:

  // @@protoc_insertion_point(class_scope:visualization.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::BaseLine > lines_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reply

// bool reply = 1;
inline void Reply::clear_reply() {
  _impl_.reply_ = false;
}
inline bool Reply::_internal_reply() const {
  return _impl_.reply_;
}
inline bool Reply::reply() const {
  // @@protoc_insertion_point(field_get:visualization.Reply.reply)
  return _internal_reply();
}
inline void Reply::_internal_set_reply(bool value) {
  
  _impl_.reply_ = value;
}
inline void Reply::set_reply(bool value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:visualization.Reply.reply)
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline double Point::_internal_x() const {
  return _impl_.x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:visualization.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:visualization.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline double Point::_internal_y() const {
  return _impl_.y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:visualization.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:visualization.Point.y)
}

// -------------------------------------------------------------------

// Label

// string text = 1;
inline void Label::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Label::text() const {
  // @@protoc_insertion_point(field_get:visualization.Label.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Label::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:visualization.Label.text)
}
inline std::string* Label::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:visualization.Label.text)
  return _s;
}
inline const std::string& Label::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Label::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Label::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Label::release_text() {
  // @@protoc_insertion_point(field_release:visualization.Label.text)
  return _impl_.text_.Release();
}
inline void Label::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:visualization.Label.text)
}

// .visualization.Point pos = 2;
inline bool Label::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool Label::has_pos() const {
  return _internal_has_pos();
}
inline void Label::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
inline const ::visualization::Point& Label::_internal_pos() const {
  const ::visualization::Point* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::visualization::Point&>(
      ::visualization::_Point_default_instance_);
}
inline const ::visualization::Point& Label::pos() const {
  // @@protoc_insertion_point(field_get:visualization.Label.pos)
  return _internal_pos();
}
inline void Label::unsafe_arena_set_allocated_pos(
    ::visualization::Point* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:visualization.Label.pos)
}
inline ::visualization::Point* Label::release_pos() {
  
  ::visualization::Point* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::visualization::Point* Label::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:visualization.Label.pos)
  
  ::visualization::Point* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::visualization::Point* Label::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::visualization::Point>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::visualization::Point* Label::mutable_pos() {
  ::visualization::Point* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:visualization.Label.pos)
  return _msg;
}
inline void Label::set_allocated_pos(::visualization::Point* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:visualization.Label.pos)
}

// -------------------------------------------------------------------

// Color

// int32 r = 1;
inline void Color::clear_r() {
  _impl_.r_ = 0;
}
inline int32_t Color::_internal_r() const {
  return _impl_.r_;
}
inline int32_t Color::r() const {
  // @@protoc_insertion_point(field_get:visualization.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(int32_t value) {
  
  _impl_.r_ = value;
}
inline void Color::set_r(int32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:visualization.Color.r)
}

// int32 g = 2;
inline void Color::clear_g() {
  _impl_.g_ = 0;
}
inline int32_t Color::_internal_g() const {
  return _impl_.g_;
}
inline int32_t Color::g() const {
  // @@protoc_insertion_point(field_get:visualization.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(int32_t value) {
  
  _impl_.g_ = value;
}
inline void Color::set_g(int32_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:visualization.Color.g)
}

// int32 b = 3;
inline void Color::clear_b() {
  _impl_.b_ = 0;
}
inline int32_t Color::_internal_b() const {
  return _impl_.b_;
}
inline int32_t Color::b() const {
  // @@protoc_insertion_point(field_get:visualization.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(int32_t value) {
  
  _impl_.b_ = value;
}
inline void Color::set_b(int32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:visualization.Color.b)
}

// int32 a = 4;
inline void Color::clear_a() {
  _impl_.a_ = 0;
}
inline int32_t Color::_internal_a() const {
  return _impl_.a_;
}
inline int32_t Color::a() const {
  // @@protoc_insertion_point(field_get:visualization.Color.a)
  return _internal_a();
}
inline void Color::_internal_set_a(int32_t value) {
  
  _impl_.a_ = value;
}
inline void Color::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:visualization.Color.a)
}

// -------------------------------------------------------------------

// BaseLine

// .visualization.Label label = 1;
inline bool BaseLine::_internal_has_label() const {
  return this != internal_default_instance() && _impl_.label_ != nullptr;
}
inline bool BaseLine::has_label() const {
  return _internal_has_label();
}
inline void BaseLine::clear_label() {
  if (GetArenaForAllocation() == nullptr && _impl_.label_ != nullptr) {
    delete _impl_.label_;
  }
  _impl_.label_ = nullptr;
}
inline const ::visualization::Label& BaseLine::_internal_label() const {
  const ::visualization::Label* p = _impl_.label_;
  return p != nullptr ? *p : reinterpret_cast<const ::visualization::Label&>(
      ::visualization::_Label_default_instance_);
}
inline const ::visualization::Label& BaseLine::label() const {
  // @@protoc_insertion_point(field_get:visualization.BaseLine.label)
  return _internal_label();
}
inline void BaseLine::unsafe_arena_set_allocated_label(
    ::visualization::Label* label) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.label_);
  }
  _impl_.label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:visualization.BaseLine.label)
}
inline ::visualization::Label* BaseLine::release_label() {
  
  ::visualization::Label* temp = _impl_.label_;
  _impl_.label_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::visualization::Label* BaseLine::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_release:visualization.BaseLine.label)
  
  ::visualization::Label* temp = _impl_.label_;
  _impl_.label_ = nullptr;
  return temp;
}
inline ::visualization::Label* BaseLine::_internal_mutable_label() {
  
  if (_impl_.label_ == nullptr) {
    auto* p = CreateMaybeMessage<::visualization::Label>(GetArenaForAllocation());
    _impl_.label_ = p;
  }
  return _impl_.label_;
}
inline ::visualization::Label* BaseLine::mutable_label() {
  ::visualization::Label* _msg = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:visualization.BaseLine.label)
  return _msg;
}
inline void BaseLine::set_allocated_label(::visualization::Label* label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.label_;
  }
  if (label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(label);
    if (message_arena != submessage_arena) {
      label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.label_ = label;
  // @@protoc_insertion_point(field_set_allocated:visualization.BaseLine.label)
}

// repeated .visualization.Point points = 3;
inline int BaseLine::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int BaseLine::points_size() const {
  return _internal_points_size();
}
inline void BaseLine::clear_points() {
  _impl_.points_.Clear();
}
inline ::visualization::Point* BaseLine::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:visualization.BaseLine.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::Point >*
BaseLine::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:visualization.BaseLine.points)
  return &_impl_.points_;
}
inline const ::visualization::Point& BaseLine::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::visualization::Point& BaseLine::points(int index) const {
  // @@protoc_insertion_point(field_get:visualization.BaseLine.points)
  return _internal_points(index);
}
inline ::visualization::Point* BaseLine::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::visualization::Point* BaseLine::add_points() {
  ::visualization::Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:visualization.BaseLine.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::Point >&
BaseLine::points() const {
  // @@protoc_insertion_point(field_list:visualization.BaseLine.points)
  return _impl_.points_;
}

// .visualization.Color color = 4;
inline bool BaseLine::_internal_has_color() const {
  return this != internal_default_instance() && _impl_.color_ != nullptr;
}
inline bool BaseLine::has_color() const {
  return _internal_has_color();
}
inline void BaseLine::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
inline const ::visualization::Color& BaseLine::_internal_color() const {
  const ::visualization::Color* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::visualization::Color&>(
      ::visualization::_Color_default_instance_);
}
inline const ::visualization::Color& BaseLine::color() const {
  // @@protoc_insertion_point(field_get:visualization.BaseLine.color)
  return _internal_color();
}
inline void BaseLine::unsafe_arena_set_allocated_color(
    ::visualization::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:visualization.BaseLine.color)
}
inline ::visualization::Color* BaseLine::release_color() {
  
  ::visualization::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::visualization::Color* BaseLine::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:visualization.BaseLine.color)
  
  ::visualization::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::visualization::Color* BaseLine::_internal_mutable_color() {
  
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::visualization::Color>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::visualization::Color* BaseLine::mutable_color() {
  ::visualization::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:visualization.BaseLine.color)
  return _msg;
}
inline void BaseLine::set_allocated_color(::visualization::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:visualization.BaseLine.color)
}

// .visualization.BaseLine.LineStyle line_style = 5;
inline void BaseLine::clear_line_style() {
  _impl_.line_style_ = 0;
}
inline ::visualization::BaseLine_LineStyle BaseLine::_internal_line_style() const {
  return static_cast< ::visualization::BaseLine_LineStyle >(_impl_.line_style_);
}
inline ::visualization::BaseLine_LineStyle BaseLine::line_style() const {
  // @@protoc_insertion_point(field_get:visualization.BaseLine.line_style)
  return _internal_line_style();
}
inline void BaseLine::_internal_set_line_style(::visualization::BaseLine_LineStyle value) {
  
  _impl_.line_style_ = value;
}
inline void BaseLine::set_line_style(::visualization::BaseLine_LineStyle value) {
  _internal_set_line_style(value);
  // @@protoc_insertion_point(field_set:visualization.BaseLine.line_style)
}

// int32 thickness = 6;
inline void BaseLine::clear_thickness() {
  _impl_.thickness_ = 0;
}
inline int32_t BaseLine::_internal_thickness() const {
  return _impl_.thickness_;
}
inline int32_t BaseLine::thickness() const {
  // @@protoc_insertion_point(field_get:visualization.BaseLine.thickness)
  return _internal_thickness();
}
inline void BaseLine::_internal_set_thickness(int32_t value) {
  
  _impl_.thickness_ = value;
}
inline void BaseLine::set_thickness(int32_t value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:visualization.BaseLine.thickness)
}

// .visualization.BaseLine.Symbol symbol = 7;
inline void BaseLine::clear_symbol() {
  _impl_.symbol_ = 0;
}
inline ::visualization::BaseLine_Symbol BaseLine::_internal_symbol() const {
  return static_cast< ::visualization::BaseLine_Symbol >(_impl_.symbol_);
}
inline ::visualization::BaseLine_Symbol BaseLine::symbol() const {
  // @@protoc_insertion_point(field_get:visualization.BaseLine.symbol)
  return _internal_symbol();
}
inline void BaseLine::_internal_set_symbol(::visualization::BaseLine_Symbol value) {
  
  _impl_.symbol_ = value;
}
inline void BaseLine::set_symbol(::visualization::BaseLine_Symbol value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:visualization.BaseLine.symbol)
}

// -------------------------------------------------------------------

// Frame

// string topic = 1;
inline void Frame::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Frame::topic() const {
  // @@protoc_insertion_point(field_get:visualization.Frame.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Frame::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:visualization.Frame.topic)
}
inline std::string* Frame::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:visualization.Frame.topic)
  return _s;
}
inline const std::string& Frame::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Frame::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Frame::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Frame::release_topic() {
  // @@protoc_insertion_point(field_release:visualization.Frame.topic)
  return _impl_.topic_.Release();
}
inline void Frame::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:visualization.Frame.topic)
}

// repeated .visualization.BaseLine lines = 2;
inline int Frame::_internal_lines_size() const {
  return _impl_.lines_.size();
}
inline int Frame::lines_size() const {
  return _internal_lines_size();
}
inline void Frame::clear_lines() {
  _impl_.lines_.Clear();
}
inline ::visualization::BaseLine* Frame::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:visualization.Frame.lines)
  return _impl_.lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::BaseLine >*
Frame::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:visualization.Frame.lines)
  return &_impl_.lines_;
}
inline const ::visualization::BaseLine& Frame::_internal_lines(int index) const {
  return _impl_.lines_.Get(index);
}
inline const ::visualization::BaseLine& Frame::lines(int index) const {
  // @@protoc_insertion_point(field_get:visualization.Frame.lines)
  return _internal_lines(index);
}
inline ::visualization::BaseLine* Frame::_internal_add_lines() {
  return _impl_.lines_.Add();
}
inline ::visualization::BaseLine* Frame::add_lines() {
  ::visualization::BaseLine* _add = _internal_add_lines();
  // @@protoc_insertion_point(field_add:visualization.Frame.lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::visualization::BaseLine >&
Frame::lines() const {
  // @@protoc_insertion_point(field_list:visualization.Frame.lines)
  return _impl_.lines_;
}

// .visualization.Frame.Type type = 3;
inline void Frame::clear_type() {
  _impl_.type_ = 0;
}
inline ::visualization::Frame_Type Frame::_internal_type() const {
  return static_cast< ::visualization::Frame_Type >(_impl_.type_);
}
inline ::visualization::Frame_Type Frame::type() const {
  // @@protoc_insertion_point(field_get:visualization.Frame.type)
  return _internal_type();
}
inline void Frame::_internal_set_type(::visualization::Frame_Type value) {
  
  _impl_.type_ = value;
}
inline void Frame::set_type(::visualization::Frame_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:visualization.Frame.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace visualization

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::visualization::BaseLine_LineStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::visualization::BaseLine_LineStyle>() {
  return ::visualization::BaseLine_LineStyle_descriptor();
}
template <> struct is_proto_enum< ::visualization::BaseLine_Symbol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::visualization::BaseLine_Symbol>() {
  return ::visualization::BaseLine_Symbol_descriptor();
}
template <> struct is_proto_enum< ::visualization::Frame_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::visualization::Frame_Type>() {
  return ::visualization::Frame_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_visualization_2eproto
